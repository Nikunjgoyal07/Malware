use inputbot::{KeySequence, KeybdKey::*, MouseButton::*, MouseCursor};
use std::{thread::sleep, time::Duration};
use std::sync::atomic::{AtomicBool, Ordering};

fn main() {
        // Flag to control whether to send "Hello, world!"
        let send_hello = AtomicBool::new(false);
        let akey = AtomicBool::new(false);
        let fkey = AtomicBool::new(false);
        let okey = AtomicBool::new(false);
        let wkey = AtomicBool::new(false);
        let ikey = AtomicBool::new(false);
        let ekey = AtomicBool::new(false);

        // Bind the number 1 key on your keyboard to a function
        Numrow1Key.bind(move || {
                if !send_hello.load(Ordering::Relaxed) {
                        KeySequence("Hello, world!").send();
                        MouseCursor::move_rel(100, 100);
                        send_hello.store(true, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));

                }
                else if send_hello.load(Ordering::Relaxed) {
                        send_hello.store(false, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));
                }
        });

        AKey.bind(move || {
                if !akey.load(Ordering::Relaxed) {
                        KeySequence("A").send();
                        MouseCursor::move_rel(100, 100);
                        akey.store(true, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));

                }
                else if akey.load(Ordering::Relaxed) {
                        akey.store(false, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));
                }
        });


        FKey.bind(move || {
                if !fkey.load(Ordering::Relaxed) {
                        KeySequence("F").send();
                        MouseCursor::move_rel(100, 100);
                        fkey.store(true, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));

                }
                else if fkey.load(Ordering::Relaxed) {
                        fkey.store(false, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));
                }
        });

        OKey.bind(move || {
                if !okey.load(Ordering::Relaxed) {
                        KeySequence("O").send();
                        MouseCursor::move_rel(100, 100);
                        okey.store(true, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));

                }
                else if okey.load(Ordering::Relaxed) {
                        okey.store(false, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));
                }
        });

        WKey.bind(move || {
                if !wkey.load(Ordering::Relaxed) {
                        KeySequence("W").send();
                        MouseCursor::move_rel(100, 100);
                        wkey.store(true, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));

                }
                else if wkey.load(Ordering::Relaxed) {
                        wkey.store(false, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));
                }
        });

        IKey.bind(move || {
                if !ikey.load(Ordering::Relaxed) {
                        KeySequence("I").send();
                        ikey.store(true, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));

                }
                else if ikey.load(Ordering::Relaxed) {
                        ikey.store(false, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));
                }
        });

        EKey.bind(move || {
                if !ekey.load(Ordering::Relaxed) {
                        KeySequence("E").send();
                        MouseCursor::move_rel(100, 100);
                        ekey.store(true, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));

                }
                else if ekey.load(Ordering::Relaxed) {
                        ekey.store(false, Ordering::Relaxed);
                        sleep(Duration::from_millis(100));
                }
        });

        // Bind your caps lock key to a function that starts an autoclicker.
        CapsLockKey.bind(move || {
                while CapsLockKey.is_toggled() {
                        LeftButton.press();
                        LeftButton.release();

                        sleep(Duration::from_millis(30));
                }
        });

        // Call this to start listening for bound inputs.
        inputbot::handle_input_events();
}
