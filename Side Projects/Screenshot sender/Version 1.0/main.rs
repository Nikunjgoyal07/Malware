// use notify_rust::Notification;
//
// fn main() {
//         Notification::new()
//             .summary("Alert Title")
//             .body("This is the alert messageThis is the alert messageThis is the alert messageThis is the alert messageThis is the alert messageThis is the alert messageThis is the alert messageThis is the alert messageThis is the alert messageThis is the alert messageThis is the alert message.")
//             .show()
//             .unwrap();
// }
//




// use screenshots::Screen;
// use std::time::Instant;
//
// fn main() {
//         let start = Instant::now();
//         let screens = Screen::all().unwrap();
//         for screen in screens {
//                 println!("capturer {screen:?}");
//                 let mut image = screen.capture().unwrap();
//                 image
//                     .save(format!("target/{}.png", screen.display_info.id))
//                     .unwrap();
//                 image = screen.capture_area(300, 300, 300, 300).unwrap();
//                 image
//                     .save(format!("target/{}-2.png", screen.display_info.id))
//                     .unwrap();
//         }
//         let screen = Screen::from_point(100, 100).unwrap();
//         println!("capturer {screen:?}");
//         let image = screen.capture_area(300, 300, 300, 300).unwrap();
//         image.save("target/capture_display_with_point.png").unwrap();
//         println!("运行耗时: {:?}", start.elapsed());
// }






// use screenshots::Screen;
//
// fn main() {
//         let screens = Screen::all().unwrap();
//         for screen in screens {
//                 let image = screen.capture().unwrap();
//                 image.save("screenshot.png").unwrap();
//                 break;
//         }
// }




use screenshots::Screen;
use reqwest::multipart;
use tokio::fs::File;
use tokio::io::AsyncReadExt;

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
        let screens = Screen::all().unwrap();
        for screen in screens {
                let image = screen.capture().unwrap();
                image.save("screenshot.png").unwrap();
                let mut file = File::open("screenshot.png").await?;
                let mut buffer = Vec::new();
                file.read_to_end(&mut buffer).await?;
                let part = multipart::Part::bytes(buffer).file_name("screenshot.png".to_string());
                let form = multipart::Form::new().part("file", part);
                let client = reqwest::Client::new();
                let response = client.post("http://localhost:3000/upload")
                    .multipart(form)
                    .send()
                    .await?;
                println!("{:?}", response.text().await?);
                break;
        }
        Ok(())
}







